name: CI/CD for application

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    environment: docker-compose
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      run: |
        BACKEND_PORT=${{ vars.BACKEND_PORT }} docker build ./src/main -t persons-service:latest

    - name: Tag and push Docker image
      run: |
        docker tag persons-service:latest ${{ secrets.DOCKERHUB_USERNAME }}/persons-service:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/persons-service:latest
    
  test:
    needs: build
    environment: docker-compose
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Create .env file
      run: |
        echo BACKEND_HOST=${{ vars.BACKEND_HOST }} >> .env
        echo BACKEND_PORT=${{ vars.BACKEND_PORT }} >> .env
        echo POSTGRES_PORT=${{ vars.POSTGRES_PORT }} >> .env
        echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
        echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
        echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
        cat .env

    - name: Pull Docker image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/persons-service:latest

    - name: Run containers
      run: |
        docker-compose -f docker-compose.yml --env-file .env up -d

    # - name: Run API Tests
    #   uses: matt-ball/newman-action@master
    #   with:
    #     collection: postman/[inst] Lab1.postman_collection.json
    #     environment: postman/[inst][heroku] Lab1.postman_environment.json
    #     delayRequest: 100
    #     reporters: '[ "cli" ]'

    # - name: Autograding
    #   uses: education/autograding@v1
    #   continue-on-error: true

    # - name: Github auto grader mark
    #   uses: Romanow/google-sheet-autograder-marker@v1.0
    #   with:
    #     google_token: ${{secrets.GOOGLE_API_KEY}}
    #     sheet_id: "1xkgjUX6Qmk7rdJG-QPOToav-HWWtthJjnShIKnw3oIY"
    #     homework_number: 1
    #     user_column: 'D'
    #     column_offset: 'F'
    #     mark: "'+"

    - name: Shutdown containers
      run: |
        docker-compose down

  deploy:
    needs: test
    environment: docker-compose
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SERVER_IP }}

    - name: Deploy to server
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'

          sudo apt-get install docker -y
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          PROJECT_DIR=~/persons-service

          if [ ! -d "$PROJECT_DIR/.git" ]; then
            git clone https://github.com/greatwormhole/lab1-template.git "$PROJECT_DIR"
            cd "$PROJECT_DIR"
          else
            cd "$PROJECT_DIR"
            git reset --hard origin/master
            git pull origin master
          fi

          rm .env

          echo BACKEND_HOST=${{ vars.BACKEND_HOST }} >> .env
          echo BACKEND_PORT=${{ vars.BACKEND_PORT }} >> .env
          echo POSTGRES_PORT=${{ vars.POSTGRES_PORT }} >> .env
          echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env

          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml --env-file .env up -d --build

          docker image prune -f
          docker container prune -f
        EOF